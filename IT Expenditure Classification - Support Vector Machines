import numpy as np
import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Load and preprocess the dataset
file_path = 'IT_Expenditure_Data_Classification.csv'
it_expenditure_noisy_df = pd.read_csv(file_path)
one_hot_encoder = OneHotEncoder()
scaler = StandardScaler()
X_categorical_encoded = one_hot_encoder.fit_transform(it_expenditure_noisy_df[['Company Size', 'Sector']]).toarray()
X_numerical_scaled = scaler.fit_transform(it_expenditure_noisy_df.drop(columns=['Company Size', 'Sector', 'Rating']))
X_combined = np.hstack((X_categorical_encoded, X_numerical_scaled))
y = it_expenditure_noisy_df['Rating']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X_combined, y, test_size=0.2, random_state=42)

# SVM with RBF kernel
svm_rbf = SVC(C=1.0, kernel='rbf', gamma='scale', random_state=42)
svm_rbf.fit(X_train, y_train)
y_pred_rbf = svm_rbf.predict(X_test)
print("Classification Report for SVM with RBF Kernel (IT Expenditure Classification):")
print(classification_report(y_test, y_pred_rbf))

# SVM with Linear kernel
svm_linear = SVC(C=1.0, kernel='linear', random_state=42)
svm_linear.fit(X_train, y_train)
y_pred_linear = svm_linear.predict(X_test)
print("\nClassification Report for SVM with Linear Kernel (IT Expenditure Classification):")
print(classification_report(y_test, y_pred_linear))

# Function to plot learning curve
def plot_learning_curve(estimator, title, X, y, cv=5, n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):
    train_sizes, train_scores, test_scores = learning_curve(
        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    plt.figure(figsize=(10, 6))
    plt.title(title)
    plt.xlabel("Training examples")
    plt.ylabel("Score")
    plt.ylim(0.7, 1.01)
    plt.grid()
    plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
    plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color="g")
    plt.plot(train_sizes, train_scores_mean, 'o-', color="r", label="Training score")
    plt.plot(train_sizes, test_scores_mean, 'o-', color="g", label="Cross-validation score")
    plt.legend(loc="best")
    plt.show()

# Plot learning curve for SVM with RBF Kernel
plot_learning_curve(svm_rbf, "Learning Curve for SVM with RBF Kernel (IT Expenditure Classification)", X_train, y_train)

# Plot learning curve for SVM with Linear Kernel
plot_learning_curve(svm_linear, "Learning Curve for SVM with Linear Kernel (IT Expenditure Classification)", X_train, y_train)

# Part 2B: Plotting Validation Curves for SVM Classifiers

# Function to plot validation curve
def plot_validation_curve(estimator, X, y, param_name, param_range, title, cv=5, n_jobs=None):
    train_scores, test_scores = validation_curve(
        estimator, X, y, param_name=param_name, param_range=param_range, cv=cv, scoring="accuracy", n_jobs=n_jobs)
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    plt.figure(figsize=(10, 6))
    plt.title(title)
    plt.xlabel(param_name)
    plt.ylabel("Score")
    plt.ylim(0.7, 1.01)
    plt.grid()
    plt.plot(param_range, train_scores_mean, label="Training score", color="r")
    plt.fill_between(param_range, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
    plt.plot(param_range, test_scores_mean, label="Cross-validation score", color="g")
    plt.fill_between(param_range, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color="g")
    plt.legend(loc="best")
    plt.show()

# C parameter range for validation curve
C_range = np.logspace(-2, 2, 5)

# Plotting Validation Curves for 'C' hyperparameter with RBF kernel
plot_validation_curve(svm_rbf, X_train, y_train, "C", C_range, "Validation Curve for SVM (RBF Kernel) - C parameter (IT Expenditure Classification)")

# Plotting Validation Curves for 'C' hyperparameter with Linear kernel
plot_validation_curve(svm_linear, X_train, y_train, "C", C_range, "Validation Curve for SVM (Linear Kernel) - C parameter (IT Expenditure Classification)")
