# Let's adapt the code to work with the IT Infrastructure dataset using an MLPClassifier.

from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split, learning_curve, validation_curve
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Load the dataset
file_path = 'IT_Infrastructure_Data_Modified.csv'
df_infrastructure = pd.read_csv(file_path)

# Preprocess the data: One-hot encode categorical variables
encoder = OneHotEncoder()
X = encoder.fit_transform(df_infrastructure.drop('Rating', axis=1))
y = df_infrastructure['Rating']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define and train the MLPClassifier
mlp = MLPClassifier(hidden_layer_sizes=(50,), activation='relu', solver='adam', max_iter=500, random_state=42)
mlp.fit(X_train, y_train)

# Predict and print the classification report
y_pred = mlp.predict(X_test)
print('Classification Report for Neural Networks (IT Infrastructure Classification)')
print(classification_report(y_test, y_pred))

# Plot learning curve
train_sizes, train_scores, test_scores = learning_curve(mlp, X_train, y_train, cv=5, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 5))

train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

plt.figure(figsize=(10, 6))
plt.title("Neural Networks Learning Curve for MLPClassifier (IT Infrastructure Classification)")
plt.xlabel("Training examples")
plt.ylabel("Score")
plt.ylim(0.7, 1.01)
plt.grid()
plt.plot(train_sizes, train_scores_mean, 'o-', color="r", label="Training score")
plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
plt.plot(train_sizes, test_scores_mean, 'o-', color="g", label="Cross-validation score")
plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color="g")
plt.legend(loc="best")
plt.show()

# Plot validation curve for 'max_iter' hyperparameter
max_iter_range = np.linspace(100, 1000, 5).astype(int)
train_scores, test_scores = validation_curve(mlp, X_train, y_train, param_name="max_iter", param_range=max_iter_range, cv=5, scoring="accuracy", n_jobs=-1)

train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

plt.figure(figsize=(10, 6))
plt.title("Neural Networks Validation Curve with MLPClassifier (max_iter) (IT Infrastructure Classification)")
plt.xlabel("max_iter")
plt.ylabel("Score")
plt.ylim(0.7, 1.01)
plt.grid()
plt.plot(max_iter_range, train_scores_mean,'o-', color="r", label="Training score")
plt.fill_between(max_iter_range, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
plt.plot(max_iter_range, test_scores_mean, 'o-', color="g", label="Cross-validation score")
plt.fill_between(max_iter_range, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color="g")
plt.legend(loc="best")
plt.show()
